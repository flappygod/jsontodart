package com.flappygo.jsontodart.Controller;


import org.apache.commons.codec.digest.DigestUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.flappygo.jsontodart.Controller.Base.BaseController;
import org.springframework.web.bind.annotation.RequestParam;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.flappygo.jsontodart.JsonToDart.DartJsonTool;
import com.flappygo.jsontodart.Models.ResponseModel;
import org.apache.commons.lang3.StringUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;

import java.net.URLDecoder;
import java.net.URLEncoder;


@RestController
@RequestMapping("/api")
public class RequestController extends BaseController {


    //美化json字符串
    @RequestMapping(value = "/jsonToPretty", produces = "application/json; charset=utf-8")
    public ResponseModel jsonToPretty(@RequestParam(value = "jsonStr", defaultValue = "") String jsonStr) {

        if (StringUtils.isNotEmpty(jsonStr)) {
            try {
                JSONObject object = JSONObject.parseObject(jsonStr);
                String pretty = JSON.toJSONString(object, SerializerFeature.PrettyFormat, SerializerFeature.WriteMapNullValue, SerializerFeature.WriteDateUseDateFormat);
                return getSuccessResult(pretty);
            } catch (Exception ex) {
                return getFailureResult(ex.getMessage());
            }
        }
        return getFailureResult("Json字符串不能为空");

    }

    //json转换为dart
    @RequestMapping(value = "/jsonToDart", produces = "application/json; charset=utf-8")
    public ResponseModel jsonToDart(@RequestParam(value = "jsonStr", defaultValue = "") String jsonStr,
                                    @RequestParam(value = "className", defaultValue = "") String className) {


        if (StringUtils.isNotEmpty(jsonStr)) {
            try {
                if (StringUtils.isEmpty(className)) {
                    return getSuccessResult(DartJsonTool.generateDartToJson(jsonStr, "AutoGenerated"));
                } else {
                    return getSuccessResult(DartJsonTool.generateDartToJson(jsonStr, className));
                }
            } catch (Exception ex) {
                return getFailureResult(ex.getMessage());
            }
        }
        return getFailureResult("Json字符串不能为空");

    }

    //Md5加密
    @RequestMapping(value = "/md5Generate", produces = "application/json; charset=utf-8")
    public ResponseModel md5Generate(@RequestParam(value = "md5Str", defaultValue = "") String md5Str) {

        try {
            JSONObject jsonObject = new JSONObject();
            String md32Lower = DigestUtils.md5Hex(md5Str).toLowerCase();
            String md32Upper = DigestUtils.md5Hex(md5Str).toUpperCase();
            jsonObject.put("md16Lower", md32Lower.substring(8, 24));
            jsonObject.put("md16Upper", md32Upper.substring(8, 24));
            jsonObject.put("md32Lower", md32Lower);
            jsonObject.put("md32Upper", md32Upper);
            return getSuccessResult(jsonObject.toJSONString());
        } catch (Exception ex) {
            return getFailureResult(ex.getMessage());
        }
    }

    //url编码
    @RequestMapping(value = "/urlEncode", produces = "application/json; charset=utf-8")
    public ResponseModel urlEncode(@RequestParam(value = "urlStr", defaultValue = "") String urlStr) {
        try {
            return getSuccessResult(URLEncoder.encode(urlStr, "utf-8"));
        } catch (Exception ex) {
            return getFailureResult(ex.getMessage());
        }
    }

    //url解码
    @RequestMapping(value = "/urlDecode", produces = "application/json; charset=utf-8")
    public ResponseModel urlDecode(@RequestParam(value = "urlStr", defaultValue = "") String urlStr) {
        try {
            return getSuccessResult(URLDecoder.decode(urlStr, "utf-8"));
        } catch (Exception ex) {
            return getFailureResult(ex.getMessage());
        }
    }


}
